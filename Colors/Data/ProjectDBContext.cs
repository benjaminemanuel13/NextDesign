using Colors.Models;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SKcode.Data
{
    public class ProjectDBContext : DbContext
    {
        public string DatabasePath { get; set; }
        
        public ProjectDBContext(string databasePath)
        {
            DatabasePath = databasePath;
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        => optionsBuilder.UseSqlite("Data Source=" + DatabasePath);

        public DbSet<Game> Games { get; set; } = null!;
        public DbSet<Level> Levels { get; set; } = null!;
        public DbSet<Pallette> Palletts { get; set; } = null!;
        public DbSet<Sprite> Sprites { get; set; }
        public DbSet<Tile8x8> Tiles8 { get; set; } = null!;
        public DbSet<Tile16x16> Tiles16 { get; set; } = null!;
        public DbSet<TileMap> TilesMaps { get; set; } = null!;
        public DbSet<TileLookup> TileLookups { get; set; } = null!;


        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Entity<Level>()
                .HasOne(l => l.Pallette)
                .WithOne(p => p.Level)
                .HasForeignKey<Pallette>(p => p.LevelId);

            modelBuilder.Entity<Level>()
                .HasMany(l => l.Sprites)
                .WithOne(p => p.Level)
                .HasForeignKey(p => p.LevelId);

            modelBuilder.Entity<Level>()
                .HasMany(l => l.Sprites)
                .WithOne(p => p.Level)
                .HasForeignKey(p => p.LevelId);

            modelBuilder.Entity<Level>()
                .HasMany(l => l.Tiles)
                .WithOne(p => p.Level)
                .HasForeignKey(p => p.LevelId);

            modelBuilder.Entity<Level>()
                .HasMany(l => l.Tiles16)
                .WithOne(p => p.Level)
                .HasForeignKey(p => p.LevelId);

            modelBuilder.Entity<Level>()
                .HasOne(l => l.TileMap)
                .WithOne(p => p.Level)
                .HasForeignKey<TileMap>(p => p.LevelId);

            modelBuilder.Entity<Game>().HasData(
            new Game { Id = 1, Name = "Game 01", Author = "Ben", Version = "1.0.0" },
            new Game { Id = 2, Name = "Game 02", Author = "Ben", Version = "1.0.0" });

            modelBuilder.Entity<Level>().HasData(
            new Level { Id = 1, Name = "Level 01", GameId = 1 },
            new Level { Id = 2, Name = "Level 02", GameId = 1 });

            byte[] pallette = [
                0x8C, 0x0D, 0x89, 0x38, 0xE0, 0x8C, 0xFC, 0xE3, 0x1F, 0xFF, 0x70, 0x07, 0x00, 0xC7, 0x92, 0xAA ];

            modelBuilder.Entity<Pallette>().HasData(
            new Pallette { Id = 1, LevelId = 1, Name = "Pallette 01", Colors = pallette.ToList() },
            new Pallette { Id = 2, LevelId = 2, Name = "Pallette 02" });

            byte[] sprite = [
                0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3,
                0xE3, 0xE3, 0xE3, 0xE3, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0xE3, 0xE3, 0xE3, 0xE3,
                0xE3, 0xE3, 0xE3, 0x40, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x40, 0xE3, 0xE3, 0xE3,
                0xE3, 0xE3, 0x40, 0x60, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x60, 0x40, 0xE3, 0xE3,
                0xE3, 0x40, 0x60, 0x80, 0x80, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0x80, 0x80, 0x60, 0x40, 0xE3,
                0xE3, 0x40, 0x60, 0x80, 0xFF, 0xFF, 0xFF, 0xC0, 0xC0, 0xFF, 0xFF, 0xFF, 0x80, 0x60, 0x40, 0xE3,
                0xE3, 0x40, 0x60, 0x80, 0xFF, 0xFF, 0xFF, 0xE0, 0xE0, 0xFF, 0xFF, 0xFF, 0x80, 0x60, 0x40, 0xE3,
                0xE3, 0x40, 0x60, 0x80, 0xFF, 0x00, 0xFF, 0xE0, 0xE0, 0xFF, 0x00, 0xFF, 0x80, 0x60, 0x40, 0xE3,
                0xE3, 0x40, 0x60, 0x80, 0xA0, 0xC0, 0xE0, 0xE0, 0xE0, 0xE0, 0xC0, 0xA0, 0x80, 0x60, 0x40, 0xE3,
                0xE3, 0x40, 0x60, 0x00, 0xA0, 0xC0, 0xC0, 0xE0, 0xE0, 0xC0, 0xA0, 0xA0, 0x00, 0x60, 0x40, 0xE3,
                0xE3, 0x40, 0x60, 0x00, 0x00, 0xA0, 0xC0, 0xC0, 0xC0, 0xC0, 0xA0, 0x00, 0x00, 0x60, 0x40, 0xE3,
                0xE3, 0x40, 0x60, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x60, 0x40, 0xE3,
                0xE3, 0xE3, 0x40, 0x60, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x60, 0x40, 0xE3, 0xE3,
                0xE3, 0xE3, 0xE3, 0x40, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x40, 0xE3, 0xE3, 0xE3,
                0xE3, 0xE3, 0xE3, 0xE3, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0xE3, 0xE3, 0xE3, 0xE3,
                0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3 ];

            modelBuilder.Entity<Sprite>().HasData(
            new Sprite { Id = 1, LevelId = 1, Name = "Sprite 01", Width = 16, Height = 16, Pixels = sprite });

            byte[] tile = [
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F ];

            modelBuilder.Entity<Tile8x8>().HasData(
                new Tile8x8 { Id = 1, LevelId = 1, Name = "Tile 01", Pixels = tile, StartSlot = 0, EndSlot = 0 });

            byte[] tile16 = [ 
                // Tree 01
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                // Tree 02
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x00, 0x00,
                0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x01,
                0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00,
                0x00, 0x00, 0x00, 0x02, 0x02, 0x02, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x02, 0x02, 0x02, 0x00, 0x00,
                // Tree 03
                0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x00, 0x00,
                0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00,
                0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00,
                0x00, 0x00, 0x00, 0x02, 0x02, 0x02, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x02, 0x02, 0x02, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x02, 0x02, 0x02, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                // Tree 04
                0x00, 0x00, 0x00, 0x02, 0x02, 0x02, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00,
                0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ];

            modelBuilder.Entity<Tile16x16>().HasData(
                new Tile16x16 { Id = 1, LevelId = 1, Name = "Tile 16 01", Pixels = tile16, StartSlot = 1, EndSlot = 4 });

            int[] tilemap = new int[1280];

            for(int i = 0; i < tilemap.Length; i++)
            {
                tilemap[i] = 1;
            }

            tilemap[1] = 2;

            modelBuilder.Entity<TileMap>().HasData(
            new TileMap { Id = 1, LevelId = 1, Name = "Tile Map 01", LookupIds = tilemap });

            modelBuilder.Entity<TileLookup>().HasData(
                new TileLookup { Id = 1, Type = (TileType)0, TileId = 1 },
                new TileLookup { Id = 2, Type = (TileType)1, TileId = 1});
        }
    }
}
