using Colors.Data.Models;
using Colors.Models;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SKcode.Data
{
    public class ProjectDBContext : DbContext
    {
        public static ProjectDBContext Project = new ProjectDBContext("colors.db");

        public string DatabasePath { get; set; }
        
        public ProjectDBContext(string databasePath)
        {
            DatabasePath = databasePath;
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        => optionsBuilder.UseSqlite("Data Source=" + DatabasePath);

        public DbSet<Game> Games { get; set; } = null!;
        public DbSet<Level> Levels { get; set; } = null!;
        public DbSet<Pallette> Palletts { get; set; } = null!;
        public DbSet<Sprite16x16> Sprites { get; set; }
        public DbSet<Tile8x8> Tiles8 { get; set; } = null!;
        public DbSet<Tile16x16> Tiles16 { get; set; } = null!;
        public DbSet<TileMap> TilesMaps { get; set; } = null!;
        public DbSet<TileLookup> TileLookups { get; set; } = null!;

        public DbSet<Colors.Models.Path> Paths { get; set; } = null!;
        public DbSet<Step> Steps { get; set; } = null!;

        public DbSet<Enemy> Enemies { get; set; } = null!;


        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Entity<Level>()
                .HasOne(l => l.Pallette)
                .WithOne(p => p.Level)
                .HasForeignKey<Pallette>(p => p.LevelId);

            modelBuilder.Entity<Level>()
                .HasMany(l => l.Sprites)
                .WithOne(p => p.Level)
                .HasForeignKey(p => p.LevelId);

            modelBuilder.Entity<Level>()
                .HasMany(l => l.Sprites)
                .WithOne(p => p.Level)
                .HasForeignKey(p => p.LevelId);

            modelBuilder.Entity<Level>()
                .HasMany(l => l.Tiles)
                .WithOne(p => p.Level)
                .HasForeignKey(p => p.LevelId);

            modelBuilder.Entity<Level>()
                .HasMany(l => l.Tiles16)
                .WithOne(p => p.Level)
                .HasForeignKey(p => p.LevelId);

            modelBuilder.Entity<Level>()
                .HasOne(l => l.TileMap)
                .WithOne(p => p.Level)
                .HasForeignKey<TileMap>(p => p.LevelId);

            modelBuilder.Entity<Level>()
                .HasMany(l => l.Paths)
                .WithOne(p => p.Level)
                .HasForeignKey(p => p.LevelId);

            modelBuilder.Entity<Level>()
                .HasMany(l => l.Enemies)
                .WithOne(p => p.Level)
                .HasForeignKey(p => p.LevelId);

            modelBuilder.Entity<Colors.Models.Path>()
                .HasMany(l => l.Steps)
                .WithOne(p => p.Path)
                .HasForeignKey(p => p.PathId);

            modelBuilder.Entity<Game>().HasData(
            new Game { Id = 1, Name = "Game 01", Author = "Ben", Version = "1.0.0" });

            modelBuilder.Entity<Level>().HasData(
            new Level { Id = 1, Name = "Level 01", GameId = 1 });

            byte[] pallette = [
                0x8C, 0x0D, 0x89, 0x38, 0xE0, 0x8C, 0xFC, 0xE3, 0x1F, 0xFF, 0x70, 0x07, 0x00, 0xC7, 0x92, 0xAA ];

            modelBuilder.Entity<Pallette>().HasData(
            new Pallette { Id = 1, LevelId = 1, Name = "Pallette 01", Colors = pallette.ToList() });

            byte[] sprite1 = [
                0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3,
                0xE3, 0xE3, 0xE3, 0xE3, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0xE3, 0xE3, 0xE3, 0xE3,
                0xE3, 0xE3, 0xE3, 0x40, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x40, 0xE3, 0xE3, 0xE3,
                0xE3, 0xE3, 0x40, 0x60, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x60, 0x40, 0xE3, 0xE3,
                0xE3, 0x40, 0x60, 0x80, 0x80, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0x80, 0x80, 0x60, 0x40, 0xE3,
                0xE3, 0x40, 0x60, 0x80, 0xFF, 0xFF, 0xFF, 0xC0, 0xC0, 0xFF, 0xFF, 0xFF, 0x80, 0x60, 0x40, 0xE3,
                0xE3, 0x40, 0x60, 0x80, 0xFF, 0xFF, 0xFF, 0xE0, 0xE0, 0xFF, 0xFF, 0xFF, 0x80, 0x60, 0x40, 0xE3,
                0xE3, 0x40, 0x60, 0x80, 0xFF, 0x00, 0xFF, 0xE0, 0xE0, 0xFF, 0x00, 0xFF, 0x80, 0x60, 0x40, 0xE3,
                0xE3, 0x40, 0x60, 0x80, 0xA0, 0xC0, 0xE0, 0xE0, 0xE0, 0xE0, 0xC0, 0xA0, 0x80, 0x60, 0x40, 0xE3,
                0xE3, 0x40, 0x60, 0x00, 0xA0, 0xC0, 0xC0, 0xE0, 0xE0, 0xC0, 0xA0, 0xA0, 0x00, 0x60, 0x40, 0xE3,
                0xE3, 0x40, 0x60, 0x00, 0x00, 0xA0, 0xC0, 0xC0, 0xC0, 0xC0, 0xA0, 0x00, 0x00, 0x60, 0x40, 0xE3,
                0xE3, 0x40, 0x60, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x60, 0x40, 0xE3,
                0xE3, 0xE3, 0x40, 0x60, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x60, 0x40, 0xE3, 0xE3,
                0xE3, 0xE3, 0xE3, 0x40, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x40, 0xE3, 0xE3, 0xE3,
                0xE3, 0xE3, 0xE3, 0xE3, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0xE3, 0xE3, 0xE3, 0xE3,
                0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3 ];

            byte[] sprite2 = [
                0xFF, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xFF,
                0xFF, 0xE3, 0xE3, 0xE3, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0xE3, 0xE3, 0xE3, 0xFF,
                0xFF, 0xE3, 0xE3, 0x40, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x40, 0xE3, 0xE3, 0xFF,
                0xFF, 0xE3, 0x40, 0x60, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x60, 0x40, 0xE3, 0xFF,
                0xFF, 0x40, 0x60, 0x80, 0x80, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0x80, 0x80, 0x60, 0x40, 0xFF,
                0xFF, 0x40, 0x60, 0x80, 0xFF, 0xFF, 0xFF, 0xC0, 0xC0, 0xFF, 0xFF, 0xFF, 0x80, 0x60, 0x40, 0xFF,
                0xFF, 0x40, 0x60, 0x80, 0xFF, 0xFF, 0xFF, 0xE0, 0xE0, 0xFF, 0xFF, 0xFF, 0x80, 0x60, 0x40, 0xFF,
                0xFF, 0x40, 0x60, 0x80, 0xFF, 0x00, 0xFF, 0xE0, 0xE0, 0xFF, 0x00, 0xFF, 0x80, 0x60, 0x40, 0xFF,
                0xFF, 0x40, 0x60, 0x80, 0xA0, 0xC0, 0xE0, 0xE0, 0xE0, 0xE0, 0xC0, 0xA0, 0x80, 0x60, 0x40, 0xFF,
                0xFF, 0x40, 0x60, 0x00, 0xA0, 0xC0, 0xC0, 0xE0, 0xE0, 0xC0, 0xA0, 0xA0, 0x00, 0x60, 0x40, 0xFF,
                0xFF, 0x40, 0x60, 0x00, 0x00, 0xA0, 0xC0, 0xC0, 0xC0, 0xC0, 0xA0, 0x00, 0x00, 0x60, 0x40, 0xFF,
                0xFF, 0x40, 0x60, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x60, 0x40, 0xFF,
                0xFF, 0xE3, 0x40, 0x60, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x60, 0x40, 0xE3, 0xFF,
                0xFF, 0xE3, 0xE3, 0x40, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x40, 0xE3, 0xE3, 0xFF,
                0xFF, 0xE3, 0xE3, 0xE3, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0xE3, 0xE3, 0xE3, 0xFF,
                0xFF, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xE3, 0xFF ];

            modelBuilder.Entity<Sprite16x16>().HasData(
            new Sprite16x16 { Id = 1, LevelId = 1, Name = "Sprite 01", Width = 16, Height = 16, Pixels = sprite1, Pos = 0 },
            new Sprite16x16 { Id = 2, LevelId = 1, Name = "Sprite 02", Width = 16, Height = 16, Pixels = sprite2, Pos = 1 });

            byte[] tile = [
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ];

            modelBuilder.Entity<Tile8x8>().HasData(
                new Tile8x8 { Id = 1, LevelId = 1, Name = "Tile 01", Pixels = tile, StartSlot = 0, EndSlot = 0 });

            byte[] tile16 = [ 
                // Tree 01
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                // Tree 02
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x00, 0x00,
                0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x01,
                0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00,
                0x00, 0x00, 0x00, 0x02, 0x02, 0x02, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x02, 0x02, 0x02, 0x00, 0x00,
                // Tree 03
                0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x00, 0x00,
                0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00,
                0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00,
                0x00, 0x00, 0x00, 0x02, 0x02, 0x02, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x02, 0x02, 0x02, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x02, 0x02, 0x02, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                // Tree 04
                0x00, 0x00, 0x00, 0x02, 0x02, 0x02, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00,
                0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ];

            modelBuilder.Entity<Tile16x16>().HasData(
                new Tile16x16 { Id = 1, LevelId = 1, Name = "Tile 16 01", Pixels = tile16, StartSlot = 1, EndSlot = 4 });

            int[] tilemap = new int[1280];

            for (int i = 0; i < tilemap.Length; i++)
            {
                tilemap[i] = 1;
            }

            modelBuilder.Entity<TileMap>().HasData(
            new TileMap { Id = 1, LevelId = 1, Name = "Tile Map 01", LookupIds = tilemap });

            modelBuilder.Entity<TileLookup>().HasData(
                new TileLookup { Id = 1, Type = (TileType)0, TileId = 1 },
                new TileLookup { Id = 2, Type = (TileType)1, TileId = 1 });

            modelBuilder.Entity<Colors.Models.Path>().HasData(
                new Colors.Models.Path { Id = 1, Name = "Path 01", LevelId = 1 },
                new Colors.Models.Path { Id = 2, Name = "Path 02", LevelId = 1 },
                new Colors.Models.Path { Id = 3, Name = "Path 03", LevelId = 1 },
                new Colors.Models.Path { Id = 4, Name = "Path 04", LevelId = 1 });

            modelBuilder.Entity<Step>().HasData(
                new Step { Id = 1, Name = "Step 1", PathId = 1, X = 19, Y = 8, Speed = 0xFFFF },
                new Step { Id = 2, Name = "Step 2", PathId = 1, X = 18, Y = 8, Speed = 0xFFFF },
                new Step { Id = 3, Name = "Step 3", PathId = 1, X = 17, Y = 8, Speed = 0xFFFF },
                new Step { Id = 4, Name = "Step 4", PathId = 1, X = 18, Y = 8, Speed = 0xFFFF },

                new Step { Id = 6, Name = "Step 2 - 1", PathId = 2, X = 0, Y = 8, Speed = 0xFFFF },
                new Step { Id = 7, Name = "Step 2 - 2", PathId = 2, X = 1, Y = 8, Speed = 0xFFFF },
                new Step { Id = 8, Name = "Step 2 - 3", PathId = 2, X = 2, Y = 8, Speed = 0xFFFF },
                new Step { Id = 9, Name = "Step 2 - 3", PathId = 2, X = 1, Y = 8, Speed = 0xFFFF },

                new Step { Id = 11, Name = "Step 3 - 1", PathId = 3, X = 1, Y = 9, Speed = 0xFFFF },
                new Step { Id = 12, Name = "Step 3 - 2", PathId = 3, X = 2, Y = 9, Speed = 0xFFFF },
                new Step { Id = 13, Name = "Step 3 - 3", PathId = 3, X = 3, Y = 9, Speed = 0xFFFF },
                new Step { Id = 14, Name = "Step 3 - 4", PathId = 3, X = 4, Y = 9, Speed = 0xFFFF },
                new Step { Id = 15, Name = "Step 3 - 5", PathId = 3, X = 3, Y = 9, Speed = 0xFFFF },
                new Step { Id = 16, Name = "Step 3 - 6", PathId = 3, X = 2, Y = 9, Speed = 0xFFFF },

                new Step { Id = 17, Name = "Step 4 - 1", PathId = 4, X = 19, Y = 8, Speed = 0xFFFF },
                new Step { Id = 18, Name = "Step 4 - 2", PathId = 4, X = 19, Y = 9, Speed = 0xFFFF },
                new Step { Id = 19, Name = "Step 4 - 3", PathId = 4, X = 19, Y = 10, Speed = 0xFFFF },
                new Step { Id = 20, Name = "Step 4 - 4", PathId = 4, X = 19, Y = 9, Speed = 0xFFFF });

        modelBuilder.Entity<Enemy>().HasData(
                new Enemy { Id = 1, LevelId = 1, Name = "Enemy 01", PathId = 1, SpriteId = 1 },
                new Enemy { Id = 2, LevelId = 1, Name = "Enemy 02", PathId = 2, SpriteId = 1 },
                new Enemy { Id = 3, LevelId = 1, Name = "Enemy 03", PathId = 3, SpriteId = 1 },
                new Enemy { Id = 4, LevelId = 1, Name = "Enemy 04", PathId = 4, SpriteId = 2 });
        }
    }
}
